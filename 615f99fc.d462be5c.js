(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{199:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return i})),r.d(t,"metadata",(function(){return s})),r.d(t,"rightToc",(function(){return o})),r.d(t,"default",(function(){return p}));var n=r(2),a=(r(0),r(346));const i={title:"Building Blocks"},s={id:"version-0.3.1/tutorial/building_blocks",isDocsHomePage:!1,title:"Building Blocks",description:"Predicates",source:"@site/versioned_docs/version-0.3.1/tutorial/building_blocks.md",permalink:"/docs/0.3.1/tutorial/building_blocks",editUrl:"https://github.com/mathiasverraes/parsica/tree/main/versioned_docs/version-0.3.1/tutorial/building_blocks.md",version:"0.3.1",sidebar:"version-0.3.1/docs",previous:{title:"What are parser combinators?",permalink:"/docs/0.3.1/tutorial/introduction"},next:{title:"Running Parsers",permalink:"/docs/0.3.1/tutorial/running_parsers"},latestVersionMainDocPermalink:"/docs"},o=[{value:"Predicates",id:"predicates",children:[]},{value:"Character parsers",id:"character-parsers",children:[]}],c={rightToc:o};function p({components:e,...t}){return Object(a.b)("wrapper",Object(n.a)({},c,t,{components:e,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"predicates"},"Predicates"),Object(a.b)("p",null,"The simplest building block is a parser that only considers the first character of an input. If the character satisfies some condition, we consume it from the input. We could write that with some ",Object(a.b)("inlineCode",{parentName:"p"},"if")," statements and ",Object(a.b)("inlineCode",{parentName:"p"},"substr")," calls, but Parsica provides abstractions for that."),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),'<?php\n$parser = satisfy(isEqual(\'a\'));\n$input = "abc";\n$result = $parser->try($input);\nassert($result->output() == "a");\nassert($result->remainder() == "bc");\n')),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"isEqual('a')")," is a predicate. If you call it with another argument, you get a boolean: ",Object(a.b)("inlineCode",{parentName:"p"},"isEqual('a')('b') == false"),"."),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"satisfy($predicate)")," is a function returns a ",Object(a.b)("inlineCode",{parentName:"p"},"Parser")," object. You can think of it as a parser constructor. This object will do the heavy lifting of taking the first character of ",Object(a.b)("inlineCode",{parentName:"p"},"$input"),", and testing it with the predicate. "),Object(a.b)("p",null,"Parsica comes with some useful predicates, including boolean and/or/not combinators: "),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"<?php\n$parser = satisfy(orPred(isDigit(), isWhitespace()));\n")),Object(a.b)("h2",{id:"character-parsers"},"Character parsers"),Object(a.b)("p",null,"In practice, you may not need to use predicates and ",Object(a.b)("inlineCode",{parentName:"p"},"satisfy")," very often. The characters API provides commonly used parsers for single characters instead:"),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"<?php\n$parser = char('a');\n")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"char($x)")," is defined as ",Object(a.b)("inlineCode",{parentName:"p"},"satisfy(isEqual($x))")," so the code above is equivalent to the first example. ",Object(a.b)("inlineCode",{parentName:"p"},"charI()")," is the case-insensitive version of ",Object(a.b)("inlineCode",{parentName:"p"},"char()"),". It preserves the case as is:"),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),'<?php\n$parser = charI(\'a\');\n$result = $parser->try("ABC");\nassert($result->output() == "A");\n$result = $parser->try("abc");\nassert($result->output() == "a");\n')),Object(a.b)("p",null,"Parsica provides various parsers for groups of characters, like ",Object(a.b)("inlineCode",{parentName:"p"},"alphaNumChar"),", ",Object(a.b)("inlineCode",{parentName:"p"},"uppercChar"),", ",Object(a.b)("inlineCode",{parentName:"p"},"punctuationChar"),", ",Object(a.b)("inlineCode",{parentName:"p"},"newline"),", and ",Object(a.b)("inlineCode",{parentName:"p"},"digitChar"),". You can find them all listed in the API Reference. "),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"<?php\n$parser = digitChar('a');\n$result = $parser->try('123');\nassert($result->output() == \"1\");\nassert(is_string($result->output()));\n")),Object(a.b)("p",null,"Note that even though we parsed a ",Object(a.b)("inlineCode",{parentName:"p"},"digitChar"),", the output is a string, not an int. That's because at this point, we're parsing characters. We'll talk about outputting other types than string later."))}p.isMDXComponent=!0},346:function(e,t,r){"use strict";r.d(t,"a",(function(){return u})),r.d(t,"b",(function(){return h}));var n=r(0),a=r.n(n);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=a.a.createContext({}),l=function(e){var t=a.a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=l(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(r),d=n,h=u["".concat(s,".").concat(d)]||u[d]||b[d]||i;return r?a.a.createElement(h,o(o({ref:t},p),{},{components:r})):a.a.createElement(h,o({ref:t},p))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,s=new Array(i);s[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:n,s[1]=o;for(var p=2;p<i;p++)s[p]=r[p];return a.a.createElement.apply(null,s)}return a.a.createElement.apply(null,r)}d.displayName="MDXCreateElement"}}]);