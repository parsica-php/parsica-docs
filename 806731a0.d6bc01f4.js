(window.webpackJsonp=window.webpackJsonp||[]).push([[131],{232:function(e,r,t){"use strict";t.r(r),t.d(r,"frontMatter",(function(){return c})),t.d(r,"metadata",(function(){return s})),t.d(r,"rightToc",(function(){return i})),t.d(r,"default",(function(){return p}));var n=t(2),a=(t(0),t(346));const c={title:"combinators"},s={id:"version-0.4.0/api/combinators",isDocsHomePage:!1,title:"combinators",description:"identity",source:"@site/versioned_docs/version-0.4.0/api/combinators.md",permalink:"/docs/0.4.0/api/combinators",editUrl:"https://github.com/mathiasverraes/parsica/tree/main/versioned_docs/version-0.4.0/api/combinators.md",version:"0.4.0",sidebar:"version-0.4.0/docs",previous:{title:"characters",permalink:"/docs/0.4.0/api/characters"},next:{title:"numeric",permalink:"/docs/0.4.0/api/numeric"},latestVersionMainDocPermalink:"/docs"},i=[{value:"identity",id:"identity",children:[]},{value:"pure",id:"pure",children:[]},{value:"optional",id:"optional",children:[]},{value:"bind",id:"bind",children:[]},{value:"sequence",id:"sequence",children:[]},{value:"keepFirst",id:"keepfirst",children:[]},{value:"keepSecond",id:"keepsecond",children:[]},{value:"either",id:"either",children:[]},{value:"append",id:"append",children:[]},{value:"assemble",id:"assemble",children:[]},{value:"collect",id:"collect",children:[]},{value:"any",id:"any",children:[]},{value:"choice",id:"choice",children:[]},{value:"atLeastOne",id:"atleastone",children:[]},{value:"zeroOrMore",id:"zeroormore",children:[]},{value:"map",id:"map",children:[]}],o={rightToc:i};function p({components:e,...r}){return Object(a.b)("wrapper",Object(n.a)({},o,r,{components:e,mdxType:"MDXLayout"}),Object(a.b)("h3",{id:"identity"},"identity"),Object(a.b)("p",null,"Identity parser, returns the Parser as is."),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"function identity(Parser $parser) : Parser\n")),Object(a.b)("h3",{id:"pure"},"pure"),Object(a.b)("p",null,"A parser that will have the argument as its output, no matter what the input was. It doesn't consume any input."),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"function pure($output) : Parser\n")),Object(a.b)("h3",{id:"optional"},"optional"),Object(a.b)("p",null,"Optionally parse something, but still succeed if the thing is not there"),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"function optional(Parser $parser) : Parser\n")),Object(a.b)("h3",{id:"bind"},"bind"),Object(a.b)("p",null,"Create a parser that takes the output from the first parser (if successful) and feeds it to the callable. The callable\nmust return another parser. If the first parser fails, the first parser is returned."),Object(a.b)("p",null,"This is a monadic bind aka flatmap."),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"function bind(Parser $parser, callable $f) : Parser\n")),Object(a.b)("h3",{id:"sequence"},"sequence"),Object(a.b)("p",null,"Parse something, then follow by something else. Ignore the result of the first parser and return the result of the\nsecond parser."),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"function sequence(Parser $first, Parser $second) : Parser\n")),Object(a.b)("h3",{id:"keepfirst"},"keepFirst"),Object(a.b)("p",null,"Sequence two parsers, and return the output of the first one."),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"function keepFirst(Parser $first, Parser $second) : Parser\n")),Object(a.b)("h3",{id:"keepsecond"},"keepSecond"),Object(a.b)("p",null,"Sequence two parsers, and return the output of the second one."),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"function keepSecond(Parser $first, Parser $second) : Parser\n")),Object(a.b)("h3",{id:"either"},"either"),Object(a.b)("p",null,"Either parse the first thing or the second thing"),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"function either(Parser $first, Parser $second) : Parser\n")),Object(a.b)("h3",{id:"append"},"append"),Object(a.b)("p",null,"Combine the parser with another parser of the same type, which will cause the results to be appended."),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"function append(Parser $left, Parser $right) : Parser\n")),Object(a.b)("h3",{id:"assemble"},"assemble"),Object(a.b)("p",null,"Append all the passed parsers."),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"function assemble(Parser ...$parsers) : Parser\n")),Object(a.b)("h3",{id:"collect"},"collect"),Object(a.b)("p",null,"Parse into an array that consists of the results of all parsers."),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"function collect(Parser ...$parsers) : Parser\n")),Object(a.b)("h3",{id:"any"},"any"),Object(a.b)("p",null,"Tries each parser one by one, returning the result of the first one that succeeds."),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"function any(Parser ...$parsers) : Parser\n")),Object(a.b)("h3",{id:"choice"},"choice"),Object(a.b)("p",null,"Tries each parser one by one, returning the result of the first one that succeeds."),Object(a.b)("p",null,"Alias for {@see any()}"),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"function choice(Parser ...$parsers) : Parser\n")),Object(a.b)("h3",{id:"atleastone"},"atLeastOne"),Object(a.b)("p",null,"One or more repetitions of Parser, with the outputs appended."),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"function atLeastOne(Parser $parser) : Parser\n")),Object(a.b)("h3",{id:"zeroormore"},"zeroOrMore"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Warning: Deprecated")),Object(a.b)("p",null,"Zero or more repetitions of Parser, with the outputs appended."),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"function zeroOrMore(Parser $parser) : Parser\n")),Object(a.b)("h3",{id:"map"},"map"),Object(a.b)("p",null,"Map a function over the parser (which in turn maps it over the result)."),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"function map(Parser $parser, callable $transform) : Parser\n")))}p.isMDXComponent=!0},346:function(e,r,t){"use strict";t.d(r,"a",(function(){return b})),t.d(r,"b",(function(){return h}));var n=t(0),a=t.n(n);function c(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function s(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?s(Object(t),!0).forEach((function(r){c(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function o(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},c=Object.keys(e);for(n=0;n<c.length;n++)t=c[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)t=c[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=a.a.createContext({}),l=function(e){var r=a.a.useContext(p),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},b=function(e){var r=l(e.components);return a.a.createElement(p.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return a.a.createElement(a.a.Fragment,{},r)}},d=a.a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,c=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),b=l(t),d=n,h=b["".concat(s,".").concat(d)]||b[d]||u[d]||c;return t?a.a.createElement(h,i(i({ref:r},p),{},{components:t})):a.a.createElement(h,i({ref:r},p))}));function h(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var c=t.length,s=new Array(c);s[0]=d;var i={};for(var o in r)hasOwnProperty.call(r,o)&&(i[o]=r[o]);i.originalType=e,i.mdxType="string"==typeof e?e:n,s[1]=i;for(var p=2;p<c;p++)s[p]=t[p];return a.a.createElement.apply(null,s)}return a.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);